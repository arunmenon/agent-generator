"""
Shared Pydantic models for data exchange between crews.
"""

from typing import List, Dict, Any, Optional
from pydantic import BaseModel, Field

class AnalysisOutput(BaseModel):
    """Output from the Analysis Crew."""
    constraints: List[str] = Field(default_factory=list, description="Limitations or boundaries identified")
    requirements: List[str] = Field(default_factory=list, description="Core requirements to be fulfilled")
    complexity: int = Field(default=5, ge=1, le=10, description="Task complexity rating (1-10)")
    domain_knowledge: List[str] = Field(default_factory=list, description="Domains of expertise needed")
    time_sensitivity: Dict[str, Any] = Field(default_factory=dict, description="Time sensitivity information")
    success_criteria: List[str] = Field(default_factory=list, description="Criteria for successful completion")
    recommended_process_type: str = Field(default="sequential", description="Recommended crew process type")

class AgentDefinition(BaseModel):
    """Definition of an agent in a plan."""
    name: str = Field(..., description="Name of the agent")
    role: str = Field(..., description="Role of the agent")
    goal: str = Field(..., description="Goal of the agent")
    backstory: str = Field(default="", description="Backstory of the agent")

class TaskDefinition(BaseModel):
    """Definition of a task in a plan."""
    name: str = Field(..., description="Name of the task")
    description: str = Field(..., description="Description of what the task does")
    assigned_to: str = Field(..., description="Name of the agent assigned to this task")
    dependencies: List[str] = Field(default_factory=list, description="Tasks this task depends on")
    complexity: str = Field(default="Medium", description="Complexity level (Low, Medium, High)")

class WorkflowDefinition(BaseModel):
    """Definition of a workflow in a plan."""
    sequence: List[str] = Field(..., description="Sequential order of task execution")
    parallel_tasks: List[List[str]] = Field(default_factory=list, description="Groups of tasks that can run in parallel")

class ToolDefinition(BaseModel):
    """Definition of a tool used by agents."""
    name: str = Field(..., description="Name of the tool")
    purpose: str = Field(..., description="Purpose or function of the tool")
    used_by: List[str] = Field(..., description="Agents who use this tool")

class PlanCandidate(BaseModel):
    """A candidate plan generated by planning algorithms."""
    plan_name: str = Field(..., description="Descriptive name of the plan")
    approach: str = Field(..., description="Detailed description of the approach")
    agents: List[AgentDefinition] = Field(..., description="Agents involved in the plan")
    tasks: List[TaskDefinition] = Field(..., description="Tasks to be performed")

class PlanVerification(BaseModel):
    """Verification results for a plan."""
    plan_name: str = Field(..., description="Name of the plan being verified")
    completeness_score: int = Field(..., ge=1, le=10, description="Rating of plan completeness")
    efficiency_score: int = Field(..., ge=1, le=10, description="Rating of plan efficiency")
    feasibility_score: int = Field(..., ge=1, le=10, description="Rating of plan feasibility")
    alignment_score: int = Field(..., ge=1, le=10, description="Rating of plan alignment with requirements")
    overall_score: int = Field(..., ge=1, le=10, description="Overall quality score")
    strengths: List[str] = Field(default_factory=list, description="Plan strengths")
    weaknesses: List[str] = Field(default_factory=list, description="Plan weaknesses")

class PlanningOutput(BaseModel):
    """Output from the Planning Crew."""
    selected_algorithm: str = Field(..., description="Algorithm used for planning")
    algorithm_justification: str = Field(..., description="Justification for algorithm selection")
    candidate_plans: List[Dict[str, Any]] = Field(default_factory=list, description="All considered plans")
    selected_plan: Dict[str, Any] = Field(..., description="The final selected plan")
    verification_score: int = Field(..., ge=1, le=10, description="Overall quality score")

class ImplementationOutput(BaseModel):
    """Output from the Implementation Crew."""
    agents: List[AgentDefinition] = Field(..., description="Agent definitions")
    tasks: List[TaskDefinition] = Field(..., description="Task definitions")
    workflow: WorkflowDefinition = Field(..., description="Workflow definition")
    process_type: str = Field(default="sequential", description="Recommended process type")
    tools: List[ToolDefinition] = Field(default_factory=list, description="Tool definitions")

class EvaluationOutput(BaseModel):
    """Output from the Evaluation Crew."""
    strengths: List[str] = Field(default_factory=list, description="Strengths of the implementation")
    weaknesses: List[str] = Field(default_factory=list, description="Weaknesses of the implementation")
    missing_elements: List[str] = Field(default_factory=list, description="Critical missing elements")
    recommendations: List[str] = Field(default_factory=list, description="Improvement recommendations")
    overall_score: int = Field(..., ge=1, le=10, description="Overall quality score")
    improvement_area: str = Field(default="none", description="Area needing most improvement")

class CrewPlan(BaseModel):
    """Final crew plan with agents, tasks and process type."""
    agents: List[AgentDefinition] = Field(..., description="Agent definitions")
    tasks: List[TaskDefinition] = Field(..., description="Task definitions")
    process: str = Field(default="sequential", description="Process type (sequential or hierarchical)")